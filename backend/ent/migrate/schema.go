// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CardsColumns holds the columns for the "cards" table.
	CardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CardsTable holds the schema information for the "cards" table.
	CardsTable = &schema.Table{
		Name:       "cards",
		Columns:    CardsColumns,
		PrimaryKey: []*schema.Column{CardsColumns[0]},
	}
	// GamesColumns holds the columns for the "games" table.
	GamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"CREATED", "STARTED", "FINISHED"}, Default: "CREATED"},
	}
	// GamesTable holds the schema information for the "games" table.
	GamesTable = &schema.Table{
		Name:       "games",
		Columns:    GamesColumns,
		PrimaryKey: []*schema.Column{GamesColumns[0]},
	}
	// ItemsColumns holds the columns for the "items" table.
	ItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "symbol", Type: field.TypeString, Size: 2147483647},
	}
	// ItemsTable holds the schema information for the "items" table.
	ItemsTable = &schema.Table{
		Name:       "items",
		Columns:    ItemsColumns,
		PrimaryKey: []*schema.Column{ItemsColumns[0]},
	}
	// PlayersColumns holds the columns for the "players" table.
	PlayersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"JOINING", "STARTED", "READY", "PLAYING", "FINISHED"}, Default: "JOINING"},
		{Name: "player_parent", Type: field.TypeInt, Nullable: true},
	}
	// PlayersTable holds the schema information for the "players" table.
	PlayersTable = &schema.Table{
		Name:       "players",
		Columns:    PlayersColumns,
		PrimaryKey: []*schema.Column{PlayersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "players_games_parent",
				Columns:    []*schema.Column{PlayersColumns[3]},
				RefColumns: []*schema.Column{GamesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ItemParentColumns holds the columns for the "item_parent" table.
	ItemParentColumns = []*schema.Column{
		{Name: "item_id", Type: field.TypeInt},
		{Name: "card_id", Type: field.TypeInt},
	}
	// ItemParentTable holds the schema information for the "item_parent" table.
	ItemParentTable = &schema.Table{
		Name:       "item_parent",
		Columns:    ItemParentColumns,
		PrimaryKey: []*schema.Column{ItemParentColumns[0], ItemParentColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "item_parent_item_id",
				Columns:    []*schema.Column{ItemParentColumns[0]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "item_parent_card_id",
				Columns:    []*schema.Column{ItemParentColumns[1]},
				RefColumns: []*schema.Column{CardsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CardsTable,
		GamesTable,
		ItemsTable,
		PlayersTable,
		ItemParentTable,
	}
)

func init() {
	PlayersTable.ForeignKeys[0].RefTable = GamesTable
	ItemParentTable.ForeignKeys[0].RefTable = ItemsTable
	ItemParentTable.ForeignKeys[1].RefTable = CardsTable
}
