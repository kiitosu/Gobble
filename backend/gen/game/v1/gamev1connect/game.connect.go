// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: game/v1/game.proto

package gamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example/gen/game/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CreateGameServiceName is the fully-qualified name of the CreateGameService service.
	CreateGameServiceName = "game.v1.CreateGameService"
	// GetGamesServiceName is the fully-qualified name of the GetGamesService service.
	GetGamesServiceName = "game.v1.GetGamesService"
	// JoinGameServiceName is the fully-qualified name of the JoinGameService service.
	JoinGameServiceName = "game.v1.JoinGameService"
	// StartGameServiceName is the fully-qualified name of the StartGameService service.
	StartGameServiceName = "game.v1.StartGameService"
	// ReportReadyServiceName is the fully-qualified name of the ReportReadyService service.
	ReportReadyServiceName = "game.v1.ReportReadyService"
	// SubmitAnswerServiceName is the fully-qualified name of the SubmitAnswerService service.
	SubmitAnswerServiceName = "game.v1.SubmitAnswerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CreateGameServiceCreateGameProcedure is the fully-qualified name of the CreateGameService's
	// CreateGame RPC.
	CreateGameServiceCreateGameProcedure = "/game.v1.CreateGameService/CreateGame"
	// GetGamesServiceGetGamesProcedure is the fully-qualified name of the GetGamesService's GetGames
	// RPC.
	GetGamesServiceGetGamesProcedure = "/game.v1.GetGamesService/GetGames"
	// JoinGameServiceJoinGameProcedure is the fully-qualified name of the JoinGameService's JoinGame
	// RPC.
	JoinGameServiceJoinGameProcedure = "/game.v1.JoinGameService/JoinGame"
	// StartGameServiceStartGameProcedure is the fully-qualified name of the StartGameService's
	// StartGame RPC.
	StartGameServiceStartGameProcedure = "/game.v1.StartGameService/StartGame"
	// ReportReadyServiceReportReadyProcedure is the fully-qualified name of the ReportReadyService's
	// ReportReady RPC.
	ReportReadyServiceReportReadyProcedure = "/game.v1.ReportReadyService/ReportReady"
	// SubmitAnswerServiceSubmitAnswerProcedure is the fully-qualified name of the SubmitAnswerService's
	// SubmitAnswer RPC.
	SubmitAnswerServiceSubmitAnswerProcedure = "/game.v1.SubmitAnswerService/SubmitAnswer"
)

// CreateGameServiceClient is a client for the game.v1.CreateGameService service.
type CreateGameServiceClient interface {
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
}

// NewCreateGameServiceClient constructs a client for the game.v1.CreateGameService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCreateGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CreateGameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	createGameServiceMethods := v1.File_game_v1_game_proto.Services().ByName("CreateGameService").Methods()
	return &createGameServiceClient{
		createGame: connect.NewClient[v1.CreateGameRequest, v1.CreateGameResponse](
			httpClient,
			baseURL+CreateGameServiceCreateGameProcedure,
			connect.WithSchema(createGameServiceMethods.ByName("CreateGame")),
			connect.WithClientOptions(opts...),
		),
	}
}

// createGameServiceClient implements CreateGameServiceClient.
type createGameServiceClient struct {
	createGame *connect.Client[v1.CreateGameRequest, v1.CreateGameResponse]
}

// CreateGame calls game.v1.CreateGameService.CreateGame.
func (c *createGameServiceClient) CreateGame(ctx context.Context, req *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return c.createGame.CallUnary(ctx, req)
}

// CreateGameServiceHandler is an implementation of the game.v1.CreateGameService service.
type CreateGameServiceHandler interface {
	CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error)
}

// NewCreateGameServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCreateGameServiceHandler(svc CreateGameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	createGameServiceMethods := v1.File_game_v1_game_proto.Services().ByName("CreateGameService").Methods()
	createGameServiceCreateGameHandler := connect.NewUnaryHandler(
		CreateGameServiceCreateGameProcedure,
		svc.CreateGame,
		connect.WithSchema(createGameServiceMethods.ByName("CreateGame")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.CreateGameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CreateGameServiceCreateGameProcedure:
			createGameServiceCreateGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCreateGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCreateGameServiceHandler struct{}

func (UnimplementedCreateGameServiceHandler) CreateGame(context.Context, *connect.Request[v1.CreateGameRequest]) (*connect.Response[v1.CreateGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.CreateGameService.CreateGame is not implemented"))
}

// GetGamesServiceClient is a client for the game.v1.GetGamesService service.
type GetGamesServiceClient interface {
	GetGames(context.Context, *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error)
}

// NewGetGamesServiceClient constructs a client for the game.v1.GetGamesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGetGamesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GetGamesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	getGamesServiceMethods := v1.File_game_v1_game_proto.Services().ByName("GetGamesService").Methods()
	return &getGamesServiceClient{
		getGames: connect.NewClient[v1.GetGamesRequest, v1.GetGamesResponse](
			httpClient,
			baseURL+GetGamesServiceGetGamesProcedure,
			connect.WithSchema(getGamesServiceMethods.ByName("GetGames")),
			connect.WithClientOptions(opts...),
		),
	}
}

// getGamesServiceClient implements GetGamesServiceClient.
type getGamesServiceClient struct {
	getGames *connect.Client[v1.GetGamesRequest, v1.GetGamesResponse]
}

// GetGames calls game.v1.GetGamesService.GetGames.
func (c *getGamesServiceClient) GetGames(ctx context.Context, req *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error) {
	return c.getGames.CallUnary(ctx, req)
}

// GetGamesServiceHandler is an implementation of the game.v1.GetGamesService service.
type GetGamesServiceHandler interface {
	GetGames(context.Context, *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error)
}

// NewGetGamesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGetGamesServiceHandler(svc GetGamesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	getGamesServiceMethods := v1.File_game_v1_game_proto.Services().ByName("GetGamesService").Methods()
	getGamesServiceGetGamesHandler := connect.NewUnaryHandler(
		GetGamesServiceGetGamesProcedure,
		svc.GetGames,
		connect.WithSchema(getGamesServiceMethods.ByName("GetGames")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.GetGamesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GetGamesServiceGetGamesProcedure:
			getGamesServiceGetGamesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGetGamesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGetGamesServiceHandler struct{}

func (UnimplementedGetGamesServiceHandler) GetGames(context.Context, *connect.Request[v1.GetGamesRequest]) (*connect.Response[v1.GetGamesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.GetGamesService.GetGames is not implemented"))
}

// JoinGameServiceClient is a client for the game.v1.JoinGameService service.
type JoinGameServiceClient interface {
	JoinGame(context.Context, *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error)
}

// NewJoinGameServiceClient constructs a client for the game.v1.JoinGameService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJoinGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JoinGameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	joinGameServiceMethods := v1.File_game_v1_game_proto.Services().ByName("JoinGameService").Methods()
	return &joinGameServiceClient{
		joinGame: connect.NewClient[v1.JoinGameRequest, v1.JoinGameResponse](
			httpClient,
			baseURL+JoinGameServiceJoinGameProcedure,
			connect.WithSchema(joinGameServiceMethods.ByName("JoinGame")),
			connect.WithClientOptions(opts...),
		),
	}
}

// joinGameServiceClient implements JoinGameServiceClient.
type joinGameServiceClient struct {
	joinGame *connect.Client[v1.JoinGameRequest, v1.JoinGameResponse]
}

// JoinGame calls game.v1.JoinGameService.JoinGame.
func (c *joinGameServiceClient) JoinGame(ctx context.Context, req *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error) {
	return c.joinGame.CallUnary(ctx, req)
}

// JoinGameServiceHandler is an implementation of the game.v1.JoinGameService service.
type JoinGameServiceHandler interface {
	JoinGame(context.Context, *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error)
}

// NewJoinGameServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJoinGameServiceHandler(svc JoinGameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	joinGameServiceMethods := v1.File_game_v1_game_proto.Services().ByName("JoinGameService").Methods()
	joinGameServiceJoinGameHandler := connect.NewUnaryHandler(
		JoinGameServiceJoinGameProcedure,
		svc.JoinGame,
		connect.WithSchema(joinGameServiceMethods.ByName("JoinGame")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.JoinGameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JoinGameServiceJoinGameProcedure:
			joinGameServiceJoinGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJoinGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJoinGameServiceHandler struct{}

func (UnimplementedJoinGameServiceHandler) JoinGame(context.Context, *connect.Request[v1.JoinGameRequest]) (*connect.Response[v1.JoinGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.JoinGameService.JoinGame is not implemented"))
}

// StartGameServiceClient is a client for the game.v1.StartGameService service.
type StartGameServiceClient interface {
	StartGame(context.Context, *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error)
}

// NewStartGameServiceClient constructs a client for the game.v1.StartGameService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStartGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StartGameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	startGameServiceMethods := v1.File_game_v1_game_proto.Services().ByName("StartGameService").Methods()
	return &startGameServiceClient{
		startGame: connect.NewClient[v1.StartGameRequest, v1.StartGameResponse](
			httpClient,
			baseURL+StartGameServiceStartGameProcedure,
			connect.WithSchema(startGameServiceMethods.ByName("StartGame")),
			connect.WithClientOptions(opts...),
		),
	}
}

// startGameServiceClient implements StartGameServiceClient.
type startGameServiceClient struct {
	startGame *connect.Client[v1.StartGameRequest, v1.StartGameResponse]
}

// StartGame calls game.v1.StartGameService.StartGame.
func (c *startGameServiceClient) StartGame(ctx context.Context, req *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error) {
	return c.startGame.CallUnary(ctx, req)
}

// StartGameServiceHandler is an implementation of the game.v1.StartGameService service.
type StartGameServiceHandler interface {
	StartGame(context.Context, *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error)
}

// NewStartGameServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStartGameServiceHandler(svc StartGameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	startGameServiceMethods := v1.File_game_v1_game_proto.Services().ByName("StartGameService").Methods()
	startGameServiceStartGameHandler := connect.NewUnaryHandler(
		StartGameServiceStartGameProcedure,
		svc.StartGame,
		connect.WithSchema(startGameServiceMethods.ByName("StartGame")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.StartGameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StartGameServiceStartGameProcedure:
			startGameServiceStartGameHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStartGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStartGameServiceHandler struct{}

func (UnimplementedStartGameServiceHandler) StartGame(context.Context, *connect.Request[v1.StartGameRequest]) (*connect.Response[v1.StartGameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.StartGameService.StartGame is not implemented"))
}

// ReportReadyServiceClient is a client for the game.v1.ReportReadyService service.
type ReportReadyServiceClient interface {
	ReportReady(context.Context, *connect.Request[v1.ReportReadyRequest]) (*connect.Response[v1.ReportReadyResponse], error)
}

// NewReportReadyServiceClient constructs a client for the game.v1.ReportReadyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReportReadyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReportReadyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reportReadyServiceMethods := v1.File_game_v1_game_proto.Services().ByName("ReportReadyService").Methods()
	return &reportReadyServiceClient{
		reportReady: connect.NewClient[v1.ReportReadyRequest, v1.ReportReadyResponse](
			httpClient,
			baseURL+ReportReadyServiceReportReadyProcedure,
			connect.WithSchema(reportReadyServiceMethods.ByName("ReportReady")),
			connect.WithClientOptions(opts...),
		),
	}
}

// reportReadyServiceClient implements ReportReadyServiceClient.
type reportReadyServiceClient struct {
	reportReady *connect.Client[v1.ReportReadyRequest, v1.ReportReadyResponse]
}

// ReportReady calls game.v1.ReportReadyService.ReportReady.
func (c *reportReadyServiceClient) ReportReady(ctx context.Context, req *connect.Request[v1.ReportReadyRequest]) (*connect.Response[v1.ReportReadyResponse], error) {
	return c.reportReady.CallUnary(ctx, req)
}

// ReportReadyServiceHandler is an implementation of the game.v1.ReportReadyService service.
type ReportReadyServiceHandler interface {
	ReportReady(context.Context, *connect.Request[v1.ReportReadyRequest]) (*connect.Response[v1.ReportReadyResponse], error)
}

// NewReportReadyServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReportReadyServiceHandler(svc ReportReadyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reportReadyServiceMethods := v1.File_game_v1_game_proto.Services().ByName("ReportReadyService").Methods()
	reportReadyServiceReportReadyHandler := connect.NewUnaryHandler(
		ReportReadyServiceReportReadyProcedure,
		svc.ReportReady,
		connect.WithSchema(reportReadyServiceMethods.ByName("ReportReady")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.ReportReadyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReportReadyServiceReportReadyProcedure:
			reportReadyServiceReportReadyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReportReadyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReportReadyServiceHandler struct{}

func (UnimplementedReportReadyServiceHandler) ReportReady(context.Context, *connect.Request[v1.ReportReadyRequest]) (*connect.Response[v1.ReportReadyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.ReportReadyService.ReportReady is not implemented"))
}

// SubmitAnswerServiceClient is a client for the game.v1.SubmitAnswerService service.
type SubmitAnswerServiceClient interface {
	SubmitAnswer(context.Context, *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error)
}

// NewSubmitAnswerServiceClient constructs a client for the game.v1.SubmitAnswerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubmitAnswerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubmitAnswerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	submitAnswerServiceMethods := v1.File_game_v1_game_proto.Services().ByName("SubmitAnswerService").Methods()
	return &submitAnswerServiceClient{
		submitAnswer: connect.NewClient[v1.SubmitAnswerRequest, v1.SubmitAnswerResponse](
			httpClient,
			baseURL+SubmitAnswerServiceSubmitAnswerProcedure,
			connect.WithSchema(submitAnswerServiceMethods.ByName("SubmitAnswer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// submitAnswerServiceClient implements SubmitAnswerServiceClient.
type submitAnswerServiceClient struct {
	submitAnswer *connect.Client[v1.SubmitAnswerRequest, v1.SubmitAnswerResponse]
}

// SubmitAnswer calls game.v1.SubmitAnswerService.SubmitAnswer.
func (c *submitAnswerServiceClient) SubmitAnswer(ctx context.Context, req *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error) {
	return c.submitAnswer.CallUnary(ctx, req)
}

// SubmitAnswerServiceHandler is an implementation of the game.v1.SubmitAnswerService service.
type SubmitAnswerServiceHandler interface {
	SubmitAnswer(context.Context, *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error)
}

// NewSubmitAnswerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubmitAnswerServiceHandler(svc SubmitAnswerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	submitAnswerServiceMethods := v1.File_game_v1_game_proto.Services().ByName("SubmitAnswerService").Methods()
	submitAnswerServiceSubmitAnswerHandler := connect.NewUnaryHandler(
		SubmitAnswerServiceSubmitAnswerProcedure,
		svc.SubmitAnswer,
		connect.WithSchema(submitAnswerServiceMethods.ByName("SubmitAnswer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/game.v1.SubmitAnswerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubmitAnswerServiceSubmitAnswerProcedure:
			submitAnswerServiceSubmitAnswerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubmitAnswerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubmitAnswerServiceHandler struct{}

func (UnimplementedSubmitAnswerServiceHandler) SubmitAnswer(context.Context, *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("game.v1.SubmitAnswerService.SubmitAnswer is not implemented"))
}
